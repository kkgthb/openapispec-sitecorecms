openapi: 3.1.3

info:
  title: Sitecore Layout Service REST API
  version: 1.0.0
  contact:
    name: "Example Example"
    email: "example@example.com"
  description: |-
    The Sitecore Layout Service is a Sitecore Headless Services endpoint that exposes Sitecore layout information as structured JavaScript Object Notation (JSON) data.

    The service leverages the Sitecore Rendering Engine to produce structured JSON output, decoupling layout and rendering, and allowing you to render Sitecore components with any front-end technology stack capable of consuming JSON data.

    The Sitecore corporation does not offer an OpenAPI specification file for their REST-based Layout Service API.

    * https://doc.sitecore.com/xp/en/developers/hd/latest/sitecore-headless-development/layout-service.html

    However, they do officially offer an SDK to frontend developers.

      * NPM package @sitecore-jss/sitecore-jss

    The TypeScript type definitions for parsing a response from the Layout Service API seem to document the way the API's one and only endpoint can be expected to respond to HTTP requests.

    * https://github.com/Sitecore/jss/blob/dev/packages/sitecore-jss/src/layout/models.ts

    The basis of this OpenAPI specification file was generated with the NPM package "ts-json-schema-generator."

    It was then hand-edited, line by line, to ensure that it matched realistic data previously received from the Layout Service API, and to add example response data.

    Please note that because this schema depends on "anyOf," some mock server and schema exploration tools may not be able to offer an excellent UI for exploring it.

servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/kswaggerhub/SitecoreLayoutService/1.0.0

tags:
  - name: layout
    description: The layout service

paths:
  /sitecore/api/layout/render/jss:
    get:
      tags:
        - layout
      summary: Layout of a Sitecore page
      description: Layout details for a Sitecore page
      operationId: renderLayoutJss
      parameters:
        - name: sc_site
          in: query
          description: Site name
          required: true
          schema:
            type: string
            default: examplesitename
        - name: sc_apikey
          in: query
          description: API key
          required: true
          schema:
            type: string
            format: uuid
            default: 00000000-0000-0000-0000-000000000000
        - name: item
          in: query
          description: Page identifier
          required: true
          schema:
            type: string
            default: /red/pepperoni
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LayoutServiceData"
        "500":
          description: A server error response

components:
  schemas:
    LayoutServiceData:
      type: object
      additionalProperties: false
      properties:
        sitecore:
          type: object
          properties:
            context:
              $ref: "#/components/schemas/LayoutJssContext"
            route:
              allOf:
                - $ref: "#/components/schemas/RouteData"
              nullable: true

    LayoutJssContext:
      type: object
      properties:
        pageEditing:
          type: boolean
          example: false
        site:
          type: object
          properties:
            name:
              type: string
        pageState:
          type: string
          example: normal
        language:
          type: string
          example: en
        itemPath:
          type: string
          example: "/sitecore/content/red/pepperoni"

    RouteData:
      type: object
      properties:
        name:
          type: string
          example: "Home"
        displayName:
          type: string
          example: "Home"
        fields:
          type: object
          additionalProperties:
            anyOf:
              - "$ref": "#/components/schemas/Field"
              - "$ref": "#/components/schemas/Item"
              - type: array
                items:
                  "$ref": "#/components/schemas/Item"
        databaseName:
          type: string
          example: iamadb
        deviceId:
          type: string
          format: uuid
          example: "fe5d7fdf-89c0-4d99-9aa3-b5fbd009c9f3"
        itemId:
          type: string
          format: uuid
          example: "11111111-1111-1111-1111-111111111111"
        itemLanguage:
          type: string
          example: en
        itemVersion:
          type: integer
          example: 1
        layoutId:
          type: string
          format: uuid
          example: "22222222-2222-2222-2222-222222222222"
        templateId:
          type: string
          format: uuid
          example: "33333333-3333-3333-3333-333333333333"
        templateName:
          type: string
          example: "Sample Page Item Etc"
        placeholders:
          "$ref": "#/components/schemas/PlaceholdersData"

    Field:
      type: object
      properties:
        metadata:
          type: object
          additionalProperties: {}
        value:
          "$ref": "#/components/schemas/GenericFieldValue"
        editable:
          type: string
      required:
        - value
      additionalProperties: false
      example:
        editable: "not editable"
        value: "hello world"

    GenericFieldValue:
      anyOf:
        - type: string
        - type: boolean
        - type: number
        - type: object
          additionalProperties: {}
        - type: array
          items:
            type: object
            additionalProperties: {}
      description: Field value data on a component
      example: "field value 0"

    Item:
      type: object
      properties:
        name:
          type: string
        displayName:
          type: string
        id:
          type: string
        url:
          type: string
        fields:
          type: object
          additionalProperties:
            anyOf:
              - "$ref": "#/components/schemas/Field"
              - "$ref": "#/components/schemas/Item"
              - type: array
                items:
                  "$ref": "#/components/schemas/Item"
              - not: {}
      required:
        - name
        - fields
      additionalProperties: false
      description: Content data returned from Content Service

    PlaceholdersData:
      type: object
      additionalProperties:
        type: array
        items:
          anyOf:
            - "$ref": "#/components/schemas/ComponentRendering"
            - "$ref": "#/components/schemas/HtmlElementRendering"
      description:
        "Placeholder contents data (name: placeholder name, then array of
        components within that placeholder name) Note: HtmlElementRendering is used
        by Sitecore Experience Editor"

    ComponentRendering:
      type: object
      properties:
        componentName:
          type: string
          example: "world"
        dataSource:
          type: string
          example: "{44444444-4444-4444-444444444444}"
        uid:
          type: string
          example: "123"
        placeholders:
          "$ref": "#/components/schemas/PlaceholdersData"
        fields:
          "$ref": "#/components/schemas/ComponentFields"
        params:
          "$ref": "#/components/schemas/ComponentParams"
      required:
        - componentName
      additionalProperties: false
      description: Definition of a component instance within a placeholder on a route

    ComponentFields:
      type: object
      additionalProperties:
        anyOf:
          - "$ref": "#/components/schemas/Field"
          - "$ref": "#/components/schemas/Item"
          - type: array
            items:
              "$ref": "#/components/schemas/Item"
      description: Content field data passed to a component

    ComponentParams:
      type: object
      additionalProperties:
        type: string
      description: Component params
      example: {}

    HtmlElementRendering:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
        contents:
          type: "string"
          nullable: true
        attributes:
          type: object
          additionalProperties:
            anyOf:
              - type: string
              - not: {}
      required:
        - name
        - contents
        - attributes
      additionalProperties: false
      description: HTML content used to support Sitecore Experience Editor

    # Begin unused schema definitions from converting Typescript types

    LayoutServiceContextData:
      type: object
      properties:
        context:
          "$ref": "#/components/schemas/LayoutServiceContext"
      required:
        - context
      additionalProperties: false
      description: Context information from the Sitecore Layout Service

    LayoutServiceContext:
      type: object
      properties:
        pageEditing:
          type: boolean
          example: false
        language:
          type: string
          example: "en"
        pageState:
          "$ref": "#/components/schemas/LayoutServicePageState"
        visitorIdentificationTimestamp:
          type: number
        site:
          type: object
          properties:
            name:
              type: string
          additionalProperties: false
        editMode:
          "$ref": "#/components/schemas/EditMode"
        clientScripts:
          type: array
          items:
            type: string
        clientData:
          type: object
          additionalProperties:
            type: object
            additionalProperties: {}
      additionalProperties: {}
      description: Shape of context data from the Sitecore Layout Service

    LayoutServicePageState:
      type: string
      enum:
        - preview
        - edit
        - normal
      description: Layout Service page state enum
      example: normal

    EditMode:
      type: string
      enum:
        - chromes
        - metadata
      description: |-
        Represents the possible modes for rendering content in Sitecore Editor
        - chromes - supported by Sitecore Experience Editor / Pages
        - metadata - supported by Sitecore Pages

    FieldMetadata:
      type: object
      properties:
        metadata:
          type: object
          additionalProperties: {}
      additionalProperties: false
      description:
        represents the field metadata provided by layout service in editMode
        'metadata'

    PlaceholderData:
      type: object
      properties:
        name:
          type: string
        path:
          type: string
        elements:
          type: array
          items:
            anyOf:
              - "$ref": "#/components/schemas/HtmlElementRendering"
              - "$ref": "#/components/schemas/ComponentRendering"
      required:
        - name
        - path
        - elements
      additionalProperties: false
      description: Contents of a single placeholder returned from placeholder service

    # End unused schema definitions from converting Typescript types
